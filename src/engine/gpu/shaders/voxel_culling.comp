#version 450

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer readonly InstanceBuffer {
    mat4 instance_transforms[];
};

layout(set = 0, binding = 1) buffer VisibilityBuffer {
    uint visibility_flags[];
};

layout(set = 0, binding = 2) uniform CullingParams {
    mat4 view_matrix;
    mat4 projection_matrix;
    vec4 frustum_planes[6];
    vec3 camera_position;
    float max_distance;
    uint instance_count;
};

bool is_sphere_in_frustum(vec3 center, float radius) {
    for (int i = 0; i < 6; i++) {
        float distance = dot(frustum_planes[i].xyz, center) + frustum_planes[i].w;
        if (distance < -radius) {
            return false;
        }
    }
    return true;
}

bool is_within_distance(vec3 position) {
    float distance = length(position - camera_position);
    return distance <= max_distance;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= instance_count) {
        return;
    }
    
    mat4 transform = instance_transforms[index];
    vec3 position = transform[3].xyz;
    
    float bounding_radius = 1.0;
    vec3 scale = vec3(
        length(transform[0].xyz),
        length(transform[1].xyz),
        length(transform[2].xyz)
    );
    bounding_radius *= max(max(scale.x, scale.y), scale.z);
    
    bool is_visible = is_sphere_in_frustum(position, bounding_radius) && 
                     is_within_distance(position);
    
    visibility_flags[index] = is_visible ? 1u : 0u;
}